import numpy as np
import random
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

# Step 1: Data Collection (Simulated)
class CacheActivitySimulator:
    def __init__(self, n_samples=1000):
        self.n_samples = n_samples

    def simulate(self):
        data = []
        labels = []
        for _ in range(self.n_samples):
            # Simulate normal behavior
            if random.random() > 0.5:
                hits = np.random.randint(500, 1000)
                misses = np.random.randint(50, 100)
                cache_hit_ratio = hits / (hits + misses)
                labels.append(0)  # Normal behavior
            # Simulate attack behavior
            else:
                hits = np.random.randint(100, 500)
                misses = np.random.randint(100, 500)
                cache_hit_ratio = hits / (hits + misses)
                labels.append(1)  # Cache side-channel attack behavior
            
            data.append([hits, misses, cache_hit_ratio])
        return np.array(data), np.array(labels)

# Step 2: Simulate and preprocess data
simulator = CacheActivitySimulator(n_samples=1000)
X, y = simulator.simulate()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 3: Create and train the model
def create_model():
    model = Sequential()
    model.add(Dense(64, input_shape=(3,), activation='relu'))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))  # Binary classification
    
    model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Create the model
model = create_model()

# Train the model
history = model.fit(X_train_scaled, y_train, epochs=10, batch_size=32, validation_data=(X_test_scaled, y_test))

# Evaluate the model
loss, accuracy = model.evaluate(X_test_scaled, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")

# Step 5: Save the model
model.save('cache_attack_model.h5')
print("Model saved as cache_attack_model.h5")
